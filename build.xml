<?xml version="1.0"?>

<project name="deploy_components" default="deploy" basedir=".">
    <!-- include ant contrib tasks -->
    <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="lib/third_party/ant-contrib-1.0b3.jar"/>

    <!-- directories -->
    <property name="components_dir" value="${basedir}/components" />
    <property name="targetlib_dir" value="${basedir}/lib/tcs" />
    <property name="distlib_path" value="build/dist/lib/tcs" />

    <!-- list of all components sorted based on their dependencies -->
    <property name="components_order" value="base_exception,class_associations,command_line_utility,compression_utility,configuration_manager,data_validation,executable_wrapper,heartbeat,object_formatter,review_data_structure,scorecard_data_structure,typesafe_enum,weighted_calculator,configuration_api,jndi_context_utility,ldap_sdk_interface,logging_wrapper,object_factory,configuration_persistence,contest_eligibility_persistence,db_connection_factory,email_engine,object_factory_config_manager_plugin,topcoder_commons_utility,database_abstraction,document_generator,id_generator,memory_usage,object_factory_configuration_api_plugin,review_feedback_management,review_score_aggregator,user_project_data_store,workdays,contest_eligibility_validation,distribution_tool,guid_generator,job_scheduling,project_payment_calculator,project_phases,search_builder,simple_cache,terms_of_use,authentication_factory,ip_server,job_processor,late_deliverables_management,phase_management,project_management,project_payment_management,project_phase_template,resource_management,review_application_management,review_management,review_score_calculator,scorecard_management,auto_pilot,deliverable_management,file_system_server,online_review_ajax_support,online_review_deliverables,online_review_login,online_review_upload_services,phase_management_persistence,project_management_persistence,resource_management_persistence,review_management_persistence,scorecard_management_persistence,deliverable_management_persistence,file_upload,late_deliverables_tracker,online_review_phases,review_assignment" />

    <!--
        Task definition to clean a single component.
        It deletes the deployed component in target lib directory and
        calls clean target for the specific component.
    -->
    <macrodef name="clean-single-component">
        <attribute name="component"/>
        <sequential>
            <delete dir="${targetlib_dir}/@{component}"/>
            <!-- call clean target for the component -->
            <ant antfile="build.xml" dir="${components_dir}/@{component}" target="clean"/>
        </sequential>
    </macrodef>

    <!--
        Task definition to deploy a single component.
        It build the component jar by calling dist target and
        copy the built jar into target lib directory.
    -->
    <macrodef name="deploy-single-component">
        <attribute name="component"/>
        <sequential>
            <!-- call deploy target for each component -->
            <ant antfile="build.xml" dir="${components_dir}/@{component}" target="dist">
                <property name="ant.build.javac.source" value="1.5"/>
                <property name="ant.build.javac.target" value="1.5"/>
            </ant>
            <copy todir="${targetlib_dir}">
                <fileset dir="${components_dir}/@{component}/${distlib_path}"/>
            </copy>
        </sequential>
    </macrodef>

    <!--
        Task definition to clean and deploy a single component.
    -->
    <macrodef name="clean-deploy">
        <attribute name="component"/>
        <sequential>
            <trycatch property="error">
                <try>
                    <clean-single-component component="@{component}"/>
                    <deploy-single-component component="@{component}"/>
                </try>
                <catch>
                    <fail>${error}</fail>
                </catch>
            </trycatch>
        </sequential>
    </macrodef>

    <!--
        Clean all components.
        Delete all deployed component jars in target lib directory and
        perform clean target of each component's build.xml file.
    -->
    <target name="clean" description="Remove all components from target lib directory and clean each components.">
        <for param="component" list="${components_order}" delimiter=",">
            <sequential>
                <echo message="@{component}"/>
                <clean-single-component component="@{component}"/>
            </sequential>
        </for>
    </target>

    <!--
        Deploy all components.
    -->
    <target name="deploy" description="Build and deploy all components to target lib directory.">
        <for param="component" list="${components_order}" delimiter=",">
            <sequential>
                <echo message="@{component}"/>
                <deploy-single-component component="@{component}"/>
            </sequential>
        </for>
    </target>

    <!--
        Clean all components first before build and deploy.
    -->
    <target name="clean-deploy" description="Clean all components first before build and deploy.">
        <for param="component" list="${components_order}" delimiter=",">
            <sequential>
                <echo message="@{component}"/>
                <clean-deploy component="@{component}"/>
            </sequential>
        </for>
    </target>

    <!--
        Deploy a single component.
        Use "ant -Dcomponent=<component_path> deploy-single" command to invoke it.
        The "component_path" is the component directory name in components_dir
        It will fail if component_path is invalid or
        if any component dependencies are not deployed yet in target libdir.
    -->
    <target name="deploy-single" description="Deploy a single component. Use '-Dcomponent=&lt;component_path&gt;' to specify the component to deploy.">
        <fail message="Property &quot;component&quot; needs to be set" unless="component"/>
        <echo message="${component}"/>
        <deploy-single-component component="${component}"/>
    </target>

    <!--
        Clean a single component.
        Use "ant -Dcomponent=<component_path> clean-single" command to invoke it.
        The "component_path" is the component directory name in components_dir
        It will fail if component_path is invalid.
    -->
    <target name="clean-single" description="Clean a single component. Use '-Dcomponent=&lt;component_path&gt;' to specify the component to clean.">
        <fail message="Property &quot;component&quot; needs to be set" unless="component"/>
        <echo message="${component}"/>
        <clean-single-component component="${component}"/>
    </target>
</project>
